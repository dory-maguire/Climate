rm(list = ls())
rm(list = ls())
setwd(".")
library(biomod2)#
library(dplyr)#
#
#Load the data#####
#
# CURRENT species occurrences in both invasive and native range. Invasive refers to USA data, Current referes to current native range data. Historicl data are not included in these analyses.#
DataSpeciesInvasive <- read.table("Invasive.txt", header=T)#
DataSpeciesCurrent <- read.table("Current2.txt", header=T)#
DataSpeciesBoth=read.table("All XY Data.txt", header=T)
attach(DataSpeciesInvasive)#
head(DataSpeciesInvasive)#
str(DataSpeciesInvasive)#
#
attach(DataSpeciesCurrent)#
head(DataSpeciesCurrent)#
str(DataSpeciesCurrent)#
#
attach(DataSpeciesBoth)#
head(DataSpeciesBoth)#
str(DataSpeciesBoth)#
#
##GET RID OF SPATIAL SAMPLING BIAS#####
##' To reduce spatial sampling bias in the occurence data, do the following:#
require(rgeos)#
require(sp)#
# The Function:#
filterByProximity <- function(xy, dist, mapUnits = F) {#
  #xy can be either a SpatialPoints or SPDF object, or a matrix#
  #dist is in km if mapUnits=F, in mapUnits otherwise#
  if (!mapUnits) {#
    d <- spDists(xy,longlat=T)#
  }#
  if (mapUnits) {#
    d <- spDists(xy,longlat=F)#
  }#
  diag(d) <- NA#
  close <- (d <= dist)#
  diag(close) <- NA#
  closePts <- which(close,arr.ind=T)#
  discard <- matrix(nrow=2,ncol=2)#
  if (nrow(closePts) > 0) {#
    while (nrow(closePts) > 0) {#
      if ((!paste(closePts[1,1],closePts[1,2],sep='_') %in% paste(discard[,1],discard[,2],sep='_')) & (!paste(closePts[1,2],closePts[1,1],sep='_') %in% paste(discard[,1],discard[,2],sep='_'))) {#
        discard <- rbind(discard, closePts[1,])#
        closePts <- closePts[-union(which(closePts[,1] == closePts[1,1]), which(closePts[,2] == closePts[1,1])),]#
      }#
    }#
    discard <- discard[complete.cases(discard),]#
    return(xy[-discard[,1],])#
  }#
  if (nrow(closePts) == 0) {#
    return(xy)#
  }#
}#
#
##' Test the function (need to make the data.frame into matrix first)#
#Need to make DataSpeciesInvasive into a simple XY matrix#
#
######FILTERED CURRENT XY Coords in BOTH NATIVE AND INVASIVE RANGE#
matrixXYBoth=as.matrix(DataSpeciesBoth[,c("Y4","X4")])#
FilteredBoth <- filterByProximity(matrixXYBoth, dist=5, mapUnits=F)#
FilteredBoth#
plot(FilteredBoth)#
#Need to add a column called "Ventenata" full of 1's.#
DataSpeciesBothFiltered=cbind(FilteredBoth, rep(1,663))#
DataSpeciesBothFiltered#
colnames(DataSpeciesBothFiltered)[3:3]=c("Ventenata4")#
DataSpeciesBothFiltered#
#put into dataframe#
DataSpeciesBothFiltered=as.data.frame(DataSpeciesBothFiltered)#
DataSpeciesBothFiltered#
plot(DataSpeciesBothFiltered)#
#
##' GET DATA READY FOR BIOMOD#####
##' Put occurence data into proper format for Biomod#
# the name of studied species#
myRespName <- "Ventenata"#
#
# the presence/absences data for our species#
myRespBoth <- as.numeric(DataSpeciesBothFiltered[,"Ventenata4"])#
#
# the XY coordinates of species data#
myRespXYBoth <- DataSpeciesBothFiltered[,c("Y4","X4")]#
# transform the presence/absence dataset into a presence only dataset to match with your own input data#
#
pres.idBoth <- which(myRespBoth == 1)#
myRespBoth <- myRespBoth[pres.idBoth]#
myRespXYBoth <- myRespXYBoth[pres.idBoth,]#
myRespXYBoth#
#
################# SELECT THE ENVIRONMENTAL VARIABLES#
##' Stack all the data (same climate data for both this time)#
##' Data from Worldclim dataset (http://www.worldclim.org/CMIP5v1). For information on formatting these data for use in Biomod see "Data Preparation.R" Data Formatting 3.#
## Select the climate variables you wish to run analyses with. Be cautious not to select too many correlated variables to avoid overfitting the model. Select variables based on biological significance, and variables that are unlikely to be heavily correlated. Data must be a matrix, data.frame, SpatialPointsDataFrame or RasterStack containing your explanatory variables that will be used to build your models.#
#
## CURRENT CLIMATE#
# select uncorrelated climate data (SAME FOR PAST AND FUTURE!)#
myExplCurrent=stack(c("./bio_1.grd", "./bio_3.grd", "./bio_4.grd", "./bio_5.grd", "./bio_6.grd", "./bio_12.grd"))#
#
##'FUTURE CLIMATE SCENARIO (have to do this for each scenario data)#
##'Here we use as an example GCM: GISS-E2-R, for RCP 60, in year 2070. #
##'This should be done for 2-3 GCMs, and 2-4 RCPs. #
#
myExplFuture1GS6070=stack(c("./gs60bi701.grd", "./gs60bi703.grd", "./gs60bi704.grd", "./gs60bi705.grd", "./gs60bi706.grd", "./gs60bi7012.grd"))#
#
##' need to ensure the layer names match the current data layer names#
names(myExplFuture1GS6070)=c("bio_1", "bio_3", "bio_4", "bio_5", "bio_6", "bio_12")#
print(myExplFuture1GS6070)
library(rgdal)
## CURRENT CLIMATE#
# select uncorrelated climate data (SAME FOR PAST AND FUTURE!)#
myExplCurrent=stack(c("./bio_1.grd", "./bio_3.grd", "./bio_4.grd", "./bio_5.grd", "./bio_6.grd", "./bio_12.grd"))#
#
##'FUTURE CLIMATE SCENARIO (have to do this for each scenario data)#
##'Here we use as an example GCM: GISS-E2-R, for RCP 60, in year 2070. #
##'This should be done for 2-3 GCMs, and 2-4 RCPs. #
#
myExplFuture1GS6070=stack(c("./gs60bi701.grd", "./gs60bi703.grd", "./gs60bi704.grd", "./gs60bi705.grd", "./gs60bi706.grd", "./gs60bi7012.grd"))#
#
##' need to ensure the layer names match the current data layer names#
names(myExplFuture1GS6070)=c("bio_1", "bio_3", "bio_4", "bio_5", "bio_6", "bio_12")#
print(myExplFuture1GS6070)
library(raster)
myExplCurrent=stack(c("./bio_1.grd", "./bio_3.grd", "./bio_4.grd", "./bio_5.grd", "./bio_6.grd", "./bio_12.grd"))
